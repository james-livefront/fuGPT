[project]
name = "fugpt"
version = "1.0.0"
description = "AI-Powered Code Analysis Tool with AST-Enhanced RAG"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "James Fishwick", email = "james@livefront.com"},
]
keywords = ["ai", "code-analysis", "ast", "rag", "llm"]

dependencies = [
    # Core dependencies
    "llm>=0.20.0",
    "sqlite-utils>=3.30.0",
    "gitignore-parser>=0.1.0",

    # AST parsing
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    "tree-sitter-java>=0.20.0",
    "tree-sitter-cpp>=0.20.0",
    "tree-sitter-kotlin>=1.1.0",

    # Vector indexing and search
    "hnswlib>=0.7.0",
    "rank-bm25>=0.2.0",

    # Machine learning
    "sentence-transformers>=2.0.0",
    "torch>=2.0.0",
    "numpy>=1.20.0",
    "scikit-learn>=1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "pytest-mock>=3.0.0",   # Mocking utilities

    # Code formatting
    "black>=23.0.0",
    "isort>=5.0.0",

    # Linting
    "ruff>=0.1.0",          # Fast Python linter (replaces flake8, pylint, etc.)
    "mypy>=1.0.0",          # Type checking

    # Security
    "bandit>=1.7.0",        # Security linter
    "safety>=2.0.0",        # Dependency vulnerability scanner

    # Documentation
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",

    # Development tools
    "pre-commit>=3.0.0",    # Git hooks
    "tox>=4.0.0",           # Testing across Python versions
    "bump2version>=1.0.0",  # Version management

    # Debugging
    "ipdb>=0.13.0",         # Enhanced debugger
    "rich>=13.0.0",         # Better terminal output
]

[project.urls]
Homepage = "https://github.com/jamesfishwick/fuGPT"
Repository = "https://github.com/jamesfishwick/fuGPT"
Issues = "https://github.com/jamesfishwick/fuGPT/issues"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-argument
    "ARG002", # unused-method-argument
    "ARG003", # unused-class-method-argument
    "ARG004", # unused-static-method-argument
    "ARG005", # unused-lambda-argument
    "N",      # pep8-naming
    "S",      # bandit
    "T",      # flake8-print
    "RUF",    # Ruff-specific rules
]
ignore = [
    "S101",   # Use of assert
    "S602",   # subprocess with shell=True (needed for command execution)
    "S603",   # subprocess-without-shell-equals-true
    "S605",   # os.system (needed for CLI integration)
    "S607",   # subprocess-partial-path
    "T201",   # print statements (we use them for CLI output)
    "E501",   # Line too long (we'll use black for formatting)
    "ARG005", # Unused lambda arguments (common in callbacks)
    "F841",   # Local variable assigned but never used
    "N806",   # Variable naming (for constants like hnsw_M)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002", "F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.bandit]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312,py313
isolated_build = true

[testenv]
deps =
    pytest
    pytest-cov
commands = pytest {posargs}

[testenv:lint]
deps =
    ruff
    black
    isort
    mypy
    bandit
commands =
    ruff check .
    black --check .
    isort --check-only .
    mypy .
    bandit -r . -f json

[testenv:format]
deps =
    black
    isort
    ruff
commands =
    black .
    isort .
    ruff check --fix .
"""

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = """
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
"""
markers = [
    "slow: marks tests as slow (deselect with '-m not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
